// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//User
enum UserType {
  SUPER_ADMIN
  ADMIN
  MERCHANT
  AGENT
  CUSTOMER
}

enum Status {
  ENABLED
  DISABLED
}

enum MerchantUpgradeStatus {
  PENDING
  TO_BE_UPGRADED
  UPGRADED
  DECLINED
}

model User {
  id                    Int                    @id @default(autoincrement())
  identifier            String                 @unique
  firstName             String
  lastName              String
  email                 String                 @unique
  phone                 String
  password              String
  userType              UserType
  profilePhoto          String?
  status                Status                 @default(ENABLED)
  state                 String?
  localGovernmentArea   String?
  createdById           Int?
  isMerchantUpgradable  Boolean                @default(false)
  merchantUpgradeStatus MerchantUpgradeStatus?
  transactionPin        String?
  roleId                Int
  ipAddress             String
  notificationToken     String?
  cacNumber             String?
  utilityDocumentUrl    String?
  isDeleted             Boolean?               @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  bank                  Bank?
  createdUsers          User[]                 @relation(name: "creatorAndCreatedUser")
  creator               User?                  @relation(name: "creatorAndCreatedUser", fields: [createdById], references: [id])
  role                  Role                   @relation(fields: [roleId], references: [id])
  wallet                Wallet?
  passwordResetRequest  PasswordResetRequest?
  transactions          Transaction[]          @relation(name: "userToTransaction")
  senderTransactions    Transaction[]          @relation(name: "senderToTransaction")
  receiverTransactions  Transaction[]          @relation(name: "receiverToTransaction")
  virtualBankAccount    VirtualBankAccount?
  commissions           UserCommission[]

  @@map("Users")
}

//Bank
enum BankCodeprovider {
  PAYSTACK
  PROVIDUS
}

model Bank {
  id               Int              @id @default(autoincrement())
  userId           Int              @unique
  bankName         String
  accountName      String
  accountNumber    String
  bankCode         String
  slug             String?
  bankCodeProvider BankCodeprovider @default(PROVIDUS)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id])

  @@map("Banks")
}

//Virtual Bank Account
enum VirtualAccountProvider {
  PAYSTACK
  PROVIDUS
}

model VirtualBankAccount {
  id            Int                    @id @default(autoincrement())
  userId        Int                    @unique
  bankName      String
  accountName   String
  accountNumber String
  slug          String?
  provider      VirtualAccountProvider
  customerCode  String? //customer code from paystack 
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accountNumber, provider])
  @@map("VirtualBankAccounts")
}

//Account Verification
model AccountVerificationRequest {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("AccountVerificationRequests")
}

//Roles
model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       User[]
  permissions RolePermission[]

  @@map("Roles")
}

//Permission
model Permission {
  id        Int              @id @default(autoincrement())
  name      String
  domain    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  roles     RolePermission[]

  @@map("Permissions")
}

//RolePermission
model RolePermission {
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("RolePermissions")
}

//Wallet
model Wallet {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  walletNumber      String   @unique
  mainBalance       Float    @default(0)
  commissionBalance Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@map("Wallets")
}

//Notification
enum NotificationType {
  WALLET_FUND_REQUEST
}

model Notification {
  id            Int              @id @default(autoincrement())
  title         String
  description   String?
  transactionId Int?
  userId        Int
  isRead        Boolean          @default(false)
  type          NotificationType
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("Notifications")
}

//Password Reset
model PasswordResetRequest {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("PasswordResetRequests")
}

//Transactions logs
enum TransactionType {
  AIRTIME_TO_CASH
  DATA_PURCHASE
  TRANSFER_FUND
  WALLET_FUND
  ELECTRICITY_BILL
  INTERNET_BILL
  CABLETV_BILL
}

enum TransactionFlow {
  IN
  OUT
}

enum TransactionStatus {
  PENDING
  SUCCESS
  APPROVED
  FAILED
  DECLINED
}

enum PaymentChannel {
  WALLET
  PAYSTACK_CHANNEL //Any of the paystack channels: card, ussd etc
  PAYSTACK_VIRTUAL_ACCOUNT_TRANSFER
  PROVIDUS_VIRTUAL_ACCOUNT_TRANSFER
}

enum WalletFundTransactionFlow {
  TO_AGENT
  TO_BENEFICIARY
  FROM_MERCHANT
  FROM_BENEFACTOR
  SELF_FUND
  FROM_PAID_COMMISSION
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Transaction {
  id                           Int                        @id @default(autoincrement())
  type                         TransactionType
  flow                         TransactionFlow
  amount                       Float
  serviceCharge                Float                      @default(0)
  totalAmount                  Float //serviceCharge + amount
  status                       TransactionStatus
  paymentStatus                PaymentStatus?
  paymentReference             String?                    @unique //reference for payment
  userId                       Int
  senderId                     Int?
  receiverId                   Int?
  destinationBankName          String?
  destinationBankAccountNumber String?
  destinationBankAccountName   String?
  shortDescription             String?                    @db.VarChar(255)
  description                  String?                    @db.Text
  transactionId                String
  provider                     String?
  providerLogo                 String?
  accountId                    String?
  packageType                  String?
  meterType                    String?
  senderIdentifier             String?
  receiverIdentifier           String?
  paymentChannel               PaymentChannel?
  token                        String?
  commission                   Float?
  merchantCommission           Float?
  companyCommission            Float?
  serviceTransactionCode       String?
  billProviderId               Int?
  billPaymentReference         String?
  walletFundTransactionFlow    WalletFundTransactionFlow?
  createdAt                    DateTime                   @default(now())
  updatedAt                    DateTime                   @updatedAt
  user                         User                       @relation(name: "userToTransaction", fields: [userId], references: [id])
  sender                       User?                      @relation(name: "senderToTransaction", fields: [senderId], references: [id])
  receiver                     User?                      @relation(name: "receiverToTransaction", fields: [receiverId], references: [id])
  billProvider                 BillProvider?              @relation(fields: [billProviderId], references: [id])

  @@index([paymentReference, paymentStatus])
  @@index([transactionId])
  @@index([type])
  @@map("Transactions")
}

//Commission
model Commission {
  id        Int              @id @default(autoincrement())
  name      String
  slug      String           @unique
  baseRate  Float
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  users     UserCommission[]

  @@map("Commissions")
}

model UserCommission {
  userId       Int
  commissionId Int
  rate         Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  commission   Commission @relation(fields: [commissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, commissionId])
  @@map("UserCommissions")
}

model BillProvider {
  id           Int           @id @default(autoincrement())
  name         String
  slug         String        @unique
  isActive     Boolean?      @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("BillProviders")
}
